 Git 中 SSH key 生成步骤

由于本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以必须要让github仓库认证你SSH key，在此之前，必须要生成SSH key。


第1步：创建SSH Key。在windows下查看[c盘->用户->自己的用户名->.ssh]下是否有id_rsa、id_rsa.pub文件，如果没有需要手动生成。
打开git bash，在控制台中输入以下命令。
1：ssh-keygen -t rsa -C "youremail@example.com"

密钥类型可以用 -t 选项指定。如果没有指定则默认生成用于SSH-2的RSA密钥。这里使用的是rsa。

同时在密钥中有一个注释字段，用-C来指定所指定的注释，可以方便用户标识这个密钥，指出密钥的用途或其他有用的信息。所以在这里输入自己的邮箱或者其他都行。

输入完毕后程序同时要求输入一个密语字符串(passphrase)，空表示没有密语。接着会让输入2次口令(password)，空表示没有口令。3次回车即可完成当前步骤，此时[c盘>用户>自己的用户名>.ssh]目录下已经生成好了。

 

2：登录github。打开setting->SSH keys，点击右上角 New SSH key，把生成好的公钥id_rsa.pub放进 key输入框中，再为当前的key起一个title来区分每个key。
3：测试：
ssh git@github.com  连接成功！
ssh -T git@gitee.com
生成gitlab的sshkey，并且重命名为id_rsa_gitlab

$ ssh-keygen -t rsa -C "your_email@email.com" -f ~/.ssh/id_rsa_gitlab
 ssh -i /home/centyuan/.ssh/id_rsa_UbuntuServer root@120.79.12.2#秘钥登录

ssh登录远程服务器:
1.命令如下
ssh -i key.pem 
ssh -i key.pem root@IP
如果出现报错说明这个问题是文件的权限太大了，需要给小点 
sudo chmod 600 key.pem 
然后再执行ssh -i key.pem root@IP
2.可以使用ssh-add 添加key文件
ssh-add -k key.pem  
3.正常登录堡垒机
ssh root@IP




git add .   后面加一个“.”，匹配所有的文件
git add * #通配符可以把当前目录下所有修改的新增的文件都自动添加：
git commit -m 'message'

git pull=git fetch +git merge #拉取远端repo并合并,git pull 命令等同于执行两个操作: 先使用 git fetch 从远程分支抓取最新的分支修改信息，然后使用 git merge 把修改合并进当前的分支。
执行git pull 后会从克隆的位置拉取代码并更新本地仓库，就是把远端的修改同步到本地
(clone不需要指定远程仓库,就是clone的)
git push #推送本地,并合并到远程
git fetch 从远程分支抓取最新的分支修改信息

#合并分支到当前分支
git merge -m 'merge experimental branch' experimental
#删除分支
git branch -d experimental
#撤销一个合并
git reset --hard HEAD^ 



版本回退:
git log filename #查看文件的修改记录
git log -number filename #如果记录太多，
git reset --hard HEAD^ #可以使工作目录回到上次提交的状态,HEAD表示当前版本
git reset --hard HEAD^^ #上上一个版本,往上100个写成 HEAD~100
#可以用回到,回退前的新版本
git reset --hard commit_id
git reflog  #用来记录你的每一次命令：便于查看commit_id

一:修复未提交文件中的错误（重置）
git reset --hard HEAD^ #可以使工作目录回到上次提交的状态,HEAD表示当前版本
git reset --hard HEAD^^ #上上一个版本

#恢复一个文件
#1.把readme.txt从HEAD中checkout 并且把它恢复成未修改时的样子,可以丢弃工作区的修改
git checkout -- readme.txt
#2. (git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。)
git reset HEAD readme.txt
 两种情况:
	一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

	一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
#3.让单个文件回滚到指定版本

    git log filename  #查看文件的修改记录 git lot -number filename 
    git reset e24357bf993516bb960fb4c556a2857e2e47f068 filename #回滚到指定版本
    git commit -m '回滚filename到xxx版本'   #提交到本地参考
    git checkout filename   #更新到工作目录
    git push origin master  #提交到远程仓库

    """
    1.git reset -mixed：此为默认方式，不带任何参数的git reset，这种方式，它回退到某个版本，只保留源码，回退commit和index信息
    2.git reset -soft:回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit即可
    3.git reset -hard 彻底回退到某个版本，本地的源码也会变成为上一个版本的内容

    """

二: 修复已提交文件中的错误
git revert:比如，我们commit了三个版本（版本一、版本二、 版本三），突然发现版本二不行（如：有bug），想要撤销版本二，但又不想影响撤销版本三的提交，就可以用 git revert 命令来反做版本二，生成新的版本四，这个版本四里会保留版本三的东西，但撤销了版本二的东西。ps:如果我们想撤销之前的某一版本，但是又想保留该目标版本后面的版本，记录下这整个版本变动流程，就可以用这种方法:
    1.查看版本号
     git log 
    2.反做 
     #注意： 这里可能会出现冲突，那么需要手动修改冲突的文件。而且要git add 文件名。
     git revert -n 4f0b001fd9d2ed9c9f2b445f8e6b8bae6f0ba974 #
    3.提交
     git commit -m "revert filename"  
    4.推送到远程仓库
     git push
    





1:git checkout -b dev origin/dev #创建并切换本地dev分支后追踪origin的dev(取远程分支并分化一个新分支)
#本地新建一个分支dev，并切换到新建的分支dev，并且建立dev与远程分支origin/dev的跟踪关系。
2:git pull origin dev #拉取origin的dev分支到本地分支
查看本地分支的跟踪分支（上游分支）
命令：git branch -vv

git push --set-upstream origin/(master) 本地分支名
拉取远程仓库：$ git pull [remoteName] [localBranchName]
推送远程仓库：$ git push [remoteName] [localBranchName]


git push origin test:master  // 提交本地test分支作为远程的master分支,
git push origin test:test     // 提交本地test分支作为远程的test分支
git push origin master:test   //提交本地的maste分支到远程的test分支,远程会自动创建test分支






